//Backend (main.mo):
import Buffer "mo:base/Buffer";
import IC "mo:base/InternetIdentity";

actor TodoApp {
  type Tarefa = {
    id: Nat;
    descricao: Text;
    concluida: Bool;
  };

  let tarefas = Buffer.Buffer<Tarefa>(0);
  var usuario : ?Principal = null;

  public func adicionarTarefa(descricao : Text) : async Nat {
    let id = tarefas.size();
    tarefas.add({ id; descricao; concluida = false });
    id;
  };

  public func marcarConcluida(id : Nat) : async () {
    if (id < tarefas.size()) {
      let tarefa = tarefas.get(id);
      tarefas.put(id, { id; descricao = tarefa.descricao; concluida = true });
    };
  };

  public query func listarTarefas() : async [Tarefa] {
    Buffer.toArray(tarefas);
  };

  public query func totalTarefasEmAndamento() : async Nat {
    var count = 0;
    for (tarefa in tarefas.vals()) {
      if (not tarefa.concluida) count += 1;
    };
    count;
  };

  public query func totalTarefasConcluidas() : async Nat {
    var count = 0;
    for (tarefa in tarefas.vals()) {
      if (tarefa.concluida) count += 1;
    };
    count;
  };

  public func login() : async Principal {
    let identity = await IC.InternetIdentity();
    usuario := ?identity.getPrincipal();
    identity.getPrincipal();
  };

  public query func isAuthenticated() : async Bool {
    switch (usuario) {
      case null { false };
      case _ { true };
    };
  };
};

//Frontend (App.jsx):
import React, { useState, useEffect } from 'react';
import { AuthClient } from '@dfinity/auth-client';

function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [tarefas, setTarefas] = useState([]);
  const [novaTarefa, setNovaTarefa] = useState('');

  useEffect(() => {
    checkAuth();
  }, []);

  const checkAuth = async () => {
    const authClient = await AuthClient.create();
    setIsAuthenticated(await authClient.isAuthenticated());
    if (await authClient.isAuthenticated()) {
      fetchTarefas();
    }
  };

  const handleLogin = async () => {
    const authClient = await AuthClient.create();
    await authClient.login({
      identityProvider: "https://identity.ic0.app",
      onSuccess: async () => {
        setIsAuthenticated(true);
        fetchTarefas();
      },
    });
  };

  const fetchTarefas = async () => {
    const lista = await window.todoApp.listarTarefas();
    setTarefas(lista);
  };

  const adicionarTarefa = async () => {
    if (novaTarefa.trim() !== '') {
      await window.todoApp.adicionarTarefa(novaTarefa);
      setNovaTarefa('');
      fetchTarefas();
    }
  };

  const concluirTarefa = async (id) => {
    await window.todoApp.marcarConcluida(id);
    fetchTarefas();
  };

  if (!isAuthenticated) {
    return (
      <div>
        <h1>TO-DO</h1>
        <p>Controle suas tarefas 100% on-chain na ICP!</p>
        <button onClick={handleLogin}>ENTRAR â†’</button>
      </div>
    );
  }

  return (
    <div>
      <h1>Minhas Tarefas</h1>
      <input
        value={novaTarefa}
        onChange={(e) => setNovaTarefa(e.target.value)}
        placeholder="Nova tarefa"
      />
      <button onClick={adicionarTarefa}>Adicionar</button>
      <ul>
        {tarefas.map((tarefa) => (
          <li key={tarefa.id}>
            {tarefa.descricao}
            {!tarefa.concluida && (
              <button onClick={() => concluirTarefa(tarefa.id)}>Concluir</button>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default App;

//dependencias: npm install @dfinity/auth-client
